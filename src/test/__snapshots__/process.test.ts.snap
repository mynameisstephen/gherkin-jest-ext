// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`process should return the correct JS 1`] = `
"const {cucumber} = require(\\"stucumber-ext\\");
         const _cucumber = cucumber.clone();describe(\\"Feature: using feature files in jest\\", () => {const feature = {\\"name\\":\\"using feature files in jest\\",\\"annotations\\":[{\\"name\\":\\"someAttribute\\",\\"arguments\\":[]}],\\"meta\\":{}, \\"filename\\": __filename};const scenarios = [{\\"name\\":\\"a simple arithmetic test\\",\\"annotations\\":[{\\"name\\":\\"some-other-attribute\\",\\"arguments\\":[]}],\\"meta\\":{}, \\"feature\\": feature, \\"steps\\": [{\\"name\\":\\"I have numbers 3 and 4\\",\\"line\\":13,\\"keyword\\":\\"Given\\"},{\\"name\\":\\"I add them\\",\\"line\\":14,\\"keyword\\":\\"When\\"},{\\"name\\":\\"I get 7\\",\\"line\\":15,\\"keyword\\":\\"Then\\"}]},{\\"name\\":\\"a more complex test\\",\\"annotations\\":[],\\"meta\\":{}, \\"feature\\": feature, \\"steps\\": [{\\"name\\":\\"I have numbers 6 and 4\\",\\"line\\":18,\\"keyword\\":\\"Given\\"},{\\"name\\":\\"I subtract them\\",\\"line\\":19,\\"keyword\\":\\"When\\"},{\\"name\\":\\"I get 2\\",\\"line\\":20,\\"keyword\\":\\"Then\\"}]},{\\"name\\":\\"a more complex test\\",\\"annotations\\":[],\\"meta\\":{}, \\"feature\\": feature, \\"steps\\": [{\\"name\\":\\"I have numbers 8 and 2\\",\\"line\\":18,\\"keyword\\":\\"Given\\"},{\\"name\\":\\"I divide them\\",\\"line\\":19,\\"keyword\\":\\"When\\"},{\\"name\\":\\"I get 4\\",\\"line\\":20,\\"keyword\\":\\"Then\\"}]},{\\"name\\":\\"using declared rules\\",\\"annotations\\":[],\\"meta\\":{}, \\"feature\\": feature, \\"steps\\": [{\\"name\\":\\"I add 3 and 4\\",\\"line\\":28,\\"keyword\\":\\"Given\\"},{\\"name\\":\\"I get 7\\",\\"line\\":29,\\"keyword\\":\\"Then\\"}]}];let world;let index = 0;beforeAll(() => {_cucumber.defineRule(\\"I {op:word} {a:int} and {b:int}\\", (world, params) => Promise.resolve().then(() => _cucumber.rule(world, \\"I have numbers <a> and <b>\\", null, params)).then(() => _cucumber.rule(world, \\"I <op> them\\", null, params)));return _cucumber.enterFeature(feature);
      });afterAll(() => _cucumber.exitFeature(feature));beforeEach(async () => {world = await _cucumber.createWorld();return _cucumber.enterScenario(world, scenarios[index])});afterEach(async () => {_cucumber.exitScenario(world, scenarios[index]);index++;});it(\\"a simple arithmetic test\\", () => {return Promise.resolve().then(() => _cucumber.rule(world, \\"I have numbers 3 and 4\\", null)).then(() => _cucumber.rule(world, \\"I add them\\", null)).then(() => _cucumber.rule(world, \\"I get 7\\", null))});it(\\"a more complex test\\", () => {return Promise.resolve().then(() => _cucumber.rule(world, \\"I have numbers 6 and 4\\", null)).then(() => _cucumber.rule(world, \\"I subtract them\\", null)).then(() => _cucumber.rule(world, \\"I get 2\\", null))});it(\\"a more complex test\\", () => {return Promise.resolve().then(() => _cucumber.rule(world, \\"I have numbers 8 and 2\\", null)).then(() => _cucumber.rule(world, \\"I divide them\\", null)).then(() => _cucumber.rule(world, \\"I get 4\\", null))});it(\\"using declared rules\\", () => {return Promise.resolve().then(() => _cucumber.rule(world, \\"I add 3 and 4\\", null)).then(() => _cucumber.rule(world, \\"I get 7\\", null))});});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUM7QUFBQSw0Q0FDUSxvdUNBS0Qsd0dBQ0YsaUVBREUsYUFFRixrREFGRSxHQUxDO0FBQUEsa1FBVUcsMEVBQ0YscURBREUsYUFFSCx5Q0FGRyxhQUdILHNDQUhHLElBS1EscUVBQ1YscURBRFUsYUFFWCw4Q0FGVyxhQUdYLHNDQUhXLHlFQUNWLHFEQURVLGFBRVgsNENBRlcsYUFHWCxzQ0FIVyxJQVVSLHNFQUNGLDRDQURFLGFBRUgsc0NBRkcsSUF6QkgiLCJmaWxlIjoidGVzdC5qcyJ9"
`;
